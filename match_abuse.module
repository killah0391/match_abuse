<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_help().
 */
function match_abuse_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.match_abuse':
      return '<p>' . t('Provides functionality for users to block other users and report abuse.') . '</p>';
  }
}

/**
 * Implements hook_mail().
 */
function match_abuse_mail($key, &$message, $params)
{
  $options = ['langcode' => $message['langcode']];
  $report = $params['report'];
  $reporter = $report->get('reporter_uid')->entity;
  $reported = $report->get('reported_uid')->entity;

  switch ($key) {
    case 'abuse_report_notification':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('New Abuse Report Submitted');
      $message['body'][] = t('A new abuse report has been submitted.');
      $message['body'][] = t('Reporter: %reporter', ['%reporter' => $reporter->getAccountName()]);
      $message['body'][] = t('Reported User: %reported', ['%reported' => $reported->getAccountName()]);
      $message['body'][] = t('Reason: %reason', ['%reason' => $report->get('reason')->value]);
      $message['body'][] = t('Message: %message', ['%message' => $report->get('message')->value]);
      break;
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function match_abuse_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{
  // Only act on user entities, in the 'default' view mode.
  if ($entity->getEntityTypeId() === 'user' && $entity->id() > 0 && $display->getMode() == 'default') {
    $current_user = \Drupal::currentUser();
    /** @var \Drupal\user\UserInterface $user_being_viewed */
    $user_being_viewed = $entity;
    $current_user_id = $current_user->id();
    $viewed_user_id = $user_being_viewed->id();

    // Don't show actions on your own profile.
    if ($current_user_id != $viewed_user_id) {
      $dropdown_items = [];
      $hide_all_other_content = FALSE;
      $block_storage = \Drupal::entityTypeManager()->getStorage('match_abuse_block');

      // Determine if the viewed user is blocked by the current user.
      if ($current_user->hasPermission('block users')) {
        $storage = \Drupal::entityTypeManager()->getStorage('match_abuse_block');
        // Check if current user has blocked the viewed user
        $query_cu_blocks_vu = $block_storage->getQuery()
          ->condition('blocker_uid', $current_user_id)
          ->condition('blocked_uid', $viewed_user_id)
          ->accessCheck(TRUE);
        $cu_blocks_vu_ids = $query_cu_blocks_vu->execute();
        $current_user_has_blocked_viewed_user = !empty($cu_blocks_vu_ids);

        // Check if viewed user has blocked the current user
        $query_vu_blocks_cu = $block_storage->getQuery()
          ->condition('blocker_uid', $viewed_user_id)
          ->condition('blocked_uid', $current_user_id)
          ->accessCheck(TRUE);
        $vu_blocks_cu_ids = $query_vu_blocks_cu->execute();
        $viewed_user_has_blocked_current_user = !empty($vu_blocks_cu_ids);

        if ($viewed_user_has_blocked_current_user) {
          $hide_all_other_content = TRUE;
          $build['match_abuse_block_alert'] = [
            '#type' => 'markup',
            '#markup' => '<div class="alert alert-warning mt-3" role="alert">' . t('%username has blocked you.', ['%username' => $user_being_viewed->getAccountName()]) . '</div>',
            '#weight' => -100, // Display prominently
          ];
          // Dropdown items remain empty as current user can't act.
        } elseif ($current_user_has_blocked_viewed_user) {
          $hide_all_other_content = TRUE;
          $report_button_link = Link::createFromRoute(
            Markup::create('<i class="bi bi-shield-exclamation"></i> ' . t('Report @username', ['@username' => $user_being_viewed->getAccountName()])),
            'match_abuse.report_abuse',
            ['user_to_report' => $viewed_user_id],
            ['attributes' => ['class' => ['btn', 'btn-danger', 'btn-sm', 'ms-2']]]
          );

          $build['match_abuse_block_alert'] = [
            '#type' => 'markup',
            '#markup' => '<div class="alert alert-warning mt-3" role="alert">' . t('You have blocked %username.', ['%username' => $user_being_viewed->getAccountName()]) . ' ' . $report_button_link->toString() . '</div>',
            '#weight' => -100, // Display prominently
          ];

          if ($current_user->hasPermission('block users')) {
            $dropdown_items['unblock_user'] = [
              'title' => Markup::create('<i class="bi bi-person-check"></i> ' . t('Unblock @username', ['@username' => $user_being_viewed->getAccountName()])),
              'url' => Url::fromRoute('match_abuse.ajax_unblock_user', ['user_to_unblock' => $viewed_user_id]),
              'attributes' => ['class' => ['use-ajax', 'dropdown-item', 'match-abuse-link']],
            ];
          }
        } else {
          // No blocks: Standard "Block User" action
          if ($current_user->hasPermission('block users')) {
            $dropdown_items['block_user'] = [
              'title' => Markup::create('<i class="bi bi-person-slash"></i> ' . t('Block @username', ['@username' => $user_being_viewed->getAccountName()])),
              'url' => Url::fromRoute('match_abuse.ajax_block_user', ['user_to_block' => $viewed_user_id]),
              'attributes' => ['class' => ['use-ajax', 'dropdown-item', 'match-abuse-link']],
            ];
          }
        }

        // Build the actions dropdown menu if there are items.
        if (!empty($dropdown_items)) {
          $build['match_abuse_user_actions'] = [
            '#type' => 'container',
            '#attributes' => ['class' => ['dropdown', 'user-profile-actions']],
            '#weight' => 10, // Adjust weight as needed relative to user_picture
            'button' => [
              '#type' => 'html_tag',
              '#tag' => 'button',
              '#attributes' => [
                'class' => ['btn', 'btn-link', 'btn-sm', 'text-decoration-none', 'p-1', 'lh-1'],
                'type' => 'button',
                'id' => 'userActionsDropdown-' . $viewed_user_id,
                'data-bs-toggle' => 'dropdown',
                'aria-expanded' => 'false',
                'title' => t('Actions'),
              ],
              'icon' => ['#markup' => '<i class="bi bi-three-dots-vertical"></i>'],
            ],
            'menu' => [
              '#theme' => 'links',
              '#links' => $dropdown_items,
              '#attributes' => [
                'class' => ['dropdown-menu'],
                'aria-labelledby' => 'userActionsDropdown-' . $viewed_user_id,
                'id' => 'userActionsDropdownMenu-' . $viewed_user_id,
              ],
            ],
            '#attached' => [
              'library' => ['core/drupal.ajax', 'match_abuse/match-abuse-script'],
            ],
          ];
        }

        if ($hide_all_other_content) {
          // Hide all fields configured in the display except user_picture.
          // Our alert and actions dropdown are added directly to $build and handled by Twig.
          $components = $display->getComponents();
          foreach (array_keys($components) as $field_name) {
            if ($field_name !== 'user_picture') { // user_picture is handled by Twig
              if (isset($build[$field_name])) {
                $build[$field_name]['#access'] = FALSE;
              }
            }
          }
          // Also hide other top-level elements that are not fields, if necessary,
          // but be cautious not to hide essential render array properties like #cache.
          // For now, hiding components should cover most profile fields.
        }

        // Clean up old elements if they were defined by a previous version of this hook.
        // These specific keys are from a previous iteration and might not be present.
        unset($build['match_abuse_block_action']);
        unset($build['match_abuse_report_action']);
      }
    }
  }
}
